worst case for input size 16 (2^4) 1,5,9,13,3,7,11,15,2,6,10,14,4,8,12,16.
our msort splices the list into 4 sublists,
1,5,9,13 | 3,7,11,15 | 2,6,10,14 | 4,8,12,16
selection sort is not an adaptive sorting algorithm so its worst case is always its best case.
so the sort list 1,5,9,13 would take the same time as 13,9,5,1 using selection sort.
that is n(n-1)/2 comparisons or O(n^2).
Merging 2 lists of size n takes at most 2n-1 comparisons or O(n), if and only if the left and right lists store alternating elements.
Clearly the 2 lists, 1,5,9,13 and 3,7,11,15 store alternating elements so 2n-1 comparions will be needed to merge these 2 lists.
Again, the 2 lists 2,6,10,14 and 4,8,12,16 store alternating elemenst so 2n-1 comparisons will be needed to merge these 2 lists.
After we unwind one level of recursion we get the 2 sublists,
1,3,5,7,9,11,13,15 | 2,4,6,8,10,12,1,4,16
These 2 sublists store alternating elements so 2n-1 comparisons is needed again to merge these 2 lists.
so for this worse-case input of size 16. we need 53 comparisons = 4(4(4-1)/2) + 2(2(4)-1) + 2(8)-1